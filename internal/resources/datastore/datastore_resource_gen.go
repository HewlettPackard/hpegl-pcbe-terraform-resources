// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datastore

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func DatastoreResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"capacity_in_bytes": schema.Int64Attribute{
				Required:            true,
				Description:         "Size of the datastore in bytes.",
				MarkdownDescription: "Size of the datastore in bytes.",
			},
			"cluster_info": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed:            true,
						Description:         "UUID string uniquely identifying the hypervisor cluster.",
						MarkdownDescription: "UUID string uniquely identifying the hypervisor cluster.",
					},
					"name": schema.StringAttribute{
						Required:            true,
						Description:         "Name of the cluster as reported by the hypervisor manager.",
						MarkdownDescription: "Name of the cluster as reported by the hypervisor manager.",
					},
				},
				CustomType: ClusterInfoType{
					ObjectType: types.ObjectType{
						AttrTypes: ClusterInfoValue{}.AttributeTypes(ctx),
					},
				},
				Required: true,
			},
			"datacenters_info": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "UUID string uniquely identifier of the datacenter.",
							MarkdownDescription: "UUID string uniquely identifier of the datacenter.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "VMware provided name for the datacenter.",
							MarkdownDescription: "VMware provided name for the datacenter.",
						},
					},
					CustomType: DatacentersInfoType{
						ObjectType: types.ObjectType{
							AttrTypes: DatacentersInfoValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "List of datacenters to which the datastore is presented to.",
				MarkdownDescription: "List of datacenters to which the datastore is presented to.",
			},
			"datastore_type": schema.StringAttribute{
				Required:            true,
				Description:         "Supported datastore types are VMFS or vVOL",
				MarkdownDescription: "Supported datastore types are VMFS or vVOL",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"VMFS",
						"VVOL",
					),
				},
			},
			"hci_cluster_uuid": schema.StringAttribute{
				Required:            true,
				Description:         "UUID string uniquely identifying the HCI cluster.",
				MarkdownDescription: "UUID string uniquely identifying the HCI cluster.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "UUID string uniquely identifying the datastore",
				MarkdownDescription: "UUID string uniquely identifying the datastore",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The data store name",
				MarkdownDescription: "The data store name",
			},
		},
	}
}

type DatastoreModel struct {
	CapacityInBytes types.Int64      `tfsdk:"capacity_in_bytes"`
	ClusterInfo     ClusterInfoValue `tfsdk:"cluster_info"`
	DatacentersInfo types.List       `tfsdk:"datacenters_info"`
	DatastoreType   types.String     `tfsdk:"datastore_type"`
	HciClusterUuid  types.String     `tfsdk:"hci_cluster_uuid"`
	Id              types.String     `tfsdk:"id"`
	Name            types.String     `tfsdk:"name"`
}

var _ basetypes.ObjectTypable = ClusterInfoType{}

type ClusterInfoType struct {
	basetypes.ObjectType
}

func (t ClusterInfoType) Equal(o attr.Type) bool {
	other, ok := o.(ClusterInfoType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ClusterInfoType) String() string {
	return "ClusterInfoType"
}

func (t ClusterInfoType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ClusterInfoValue{
		Id:    idVal,
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewClusterInfoValueNull() ClusterInfoValue {
	return ClusterInfoValue{
		state: attr.ValueStateNull,
	}
}

func NewClusterInfoValueUnknown() ClusterInfoValue {
	return ClusterInfoValue{
		state: attr.ValueStateUnknown,
	}
}

func NewClusterInfoValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ClusterInfoValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ClusterInfoValue Attribute Value",
				"While creating a ClusterInfoValue value, a missing attribute value was detected. "+
					"A ClusterInfoValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ClusterInfoValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ClusterInfoValue Attribute Type",
				"While creating a ClusterInfoValue value, an invalid attribute value was detected. "+
					"A ClusterInfoValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ClusterInfoValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ClusterInfoValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ClusterInfoValue Attribute Value",
				"While creating a ClusterInfoValue value, an extra attribute value was detected. "+
					"A ClusterInfoValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ClusterInfoValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewClusterInfoValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewClusterInfoValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewClusterInfoValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewClusterInfoValueUnknown(), diags
	}

	return ClusterInfoValue{
		Id:    idVal,
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewClusterInfoValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ClusterInfoValue {
	object, diags := NewClusterInfoValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewClusterInfoValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ClusterInfoType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewClusterInfoValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewClusterInfoValueUnknown(), nil
	}

	if in.IsNull() {
		return NewClusterInfoValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewClusterInfoValueMust(ClusterInfoValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ClusterInfoType) ValueType(ctx context.Context) attr.Value {
	return ClusterInfoValue{}
}

var _ basetypes.ObjectValuable = ClusterInfoValue{}

type ClusterInfoValue struct {
	Id    basetypes.StringValue `tfsdk:"id"`
	Name  basetypes.StringValue `tfsdk:"name"`
	state attr.ValueState
}

func (v ClusterInfoValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ClusterInfoValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ClusterInfoValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ClusterInfoValue) String() string {
	return "ClusterInfoValue"
}

func (v ClusterInfoValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"id":   basetypes.StringType{},
		"name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":   v.Id,
			"name": v.Name,
		})

	return objVal, diags
}

func (v ClusterInfoValue) Equal(o attr.Value) bool {
	other, ok := o.(ClusterInfoValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v ClusterInfoValue) Type(ctx context.Context) attr.Type {
	return ClusterInfoType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ClusterInfoValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":   basetypes.StringType{},
		"name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = DatacentersInfoType{}

type DatacentersInfoType struct {
	basetypes.ObjectType
}

func (t DatacentersInfoType) Equal(o attr.Type) bool {
	other, ok := o.(DatacentersInfoType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DatacentersInfoType) String() string {
	return "DatacentersInfoType"
}

func (t DatacentersInfoType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DatacentersInfoValue{
		Id:    idVal,
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewDatacentersInfoValueNull() DatacentersInfoValue {
	return DatacentersInfoValue{
		state: attr.ValueStateNull,
	}
}

func NewDatacentersInfoValueUnknown() DatacentersInfoValue {
	return DatacentersInfoValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDatacentersInfoValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DatacentersInfoValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DatacentersInfoValue Attribute Value",
				"While creating a DatacentersInfoValue value, a missing attribute value was detected. "+
					"A DatacentersInfoValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DatacentersInfoValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DatacentersInfoValue Attribute Type",
				"While creating a DatacentersInfoValue value, an invalid attribute value was detected. "+
					"A DatacentersInfoValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DatacentersInfoValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DatacentersInfoValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DatacentersInfoValue Attribute Value",
				"While creating a DatacentersInfoValue value, an extra attribute value was detected. "+
					"A DatacentersInfoValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DatacentersInfoValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDatacentersInfoValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewDatacentersInfoValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewDatacentersInfoValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewDatacentersInfoValueUnknown(), diags
	}

	return DatacentersInfoValue{
		Id:    idVal,
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewDatacentersInfoValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DatacentersInfoValue {
	object, diags := NewDatacentersInfoValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDatacentersInfoValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DatacentersInfoType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDatacentersInfoValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDatacentersInfoValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDatacentersInfoValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDatacentersInfoValueMust(DatacentersInfoValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DatacentersInfoType) ValueType(ctx context.Context) attr.Value {
	return DatacentersInfoValue{}
}

var _ basetypes.ObjectValuable = DatacentersInfoValue{}

type DatacentersInfoValue struct {
	Id    basetypes.StringValue `tfsdk:"id"`
	Name  basetypes.StringValue `tfsdk:"name"`
	state attr.ValueState
}

func (v DatacentersInfoValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DatacentersInfoValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DatacentersInfoValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DatacentersInfoValue) String() string {
	return "DatacentersInfoValue"
}

func (v DatacentersInfoValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"id":   basetypes.StringType{},
		"name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":   v.Id,
			"name": v.Name,
		})

	return objVal, diags
}

func (v DatacentersInfoValue) Equal(o attr.Value) bool {
	other, ok := o.(DatacentersInfoValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v DatacentersInfoValue) Type(ctx context.Context) attr.Type {
	return DatacentersInfoType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DatacentersInfoValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":   basetypes.StringType{},
		"name": basetypes.StringType{},
	}
}
