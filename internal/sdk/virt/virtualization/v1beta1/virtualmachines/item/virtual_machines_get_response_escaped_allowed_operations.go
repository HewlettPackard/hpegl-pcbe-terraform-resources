package item
type VirtualMachinesGetResponse_allowedOperations int

const (
    VIRTUAL_MACHINE_POWER_ON_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS VirtualMachinesGetResponse_allowedOperations = iota
    VIRTUAL_MACHINE_POWER_OFF_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
    VIRTUAL_MACHINE_RESET_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
    VIRTUAL_MACHINE_SHUTDOWN_GUEST_OS_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
    VIRTUAL_MACHINE_RESTART_GUEST_OS_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
    VIRTUAL_MACHINE_DELETE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
    VIRTUAL_MACHINE_BACKUP_CREATE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
    VIRTUAL_MACHINE_BACKUP_UPDATE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
    VIRTUAL_MACHINE_BACKUP_DELETE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
    VIRTUAL_MACHINE_SNAPSHOT_CREATE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
    VIRTUAL_MACHINE_SNAPSHOT_UPDATE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
    VIRTUAL_MACHINE_SNAPSHOT_DELETE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
    VIRTUAL_MACHINE_RESTORE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
    VIRTUAL_MACHINE_DISKS_RESTORE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
)

func (i VirtualMachinesGetResponse_allowedOperations) String() string {
    return []string{"VIRTUAL_MACHINE_POWER_ON", "VIRTUAL_MACHINE_POWER_OFF", "VIRTUAL_MACHINE_RESET", "VIRTUAL_MACHINE_SHUTDOWN_GUEST_OS", "VIRTUAL_MACHINE_RESTART_GUEST_OS", "VIRTUAL_MACHINE_DELETE", "VIRTUAL_MACHINE_BACKUP_CREATE", "VIRTUAL_MACHINE_BACKUP_UPDATE", "VIRTUAL_MACHINE_BACKUP_DELETE", "VIRTUAL_MACHINE_SNAPSHOT_CREATE", "VIRTUAL_MACHINE_SNAPSHOT_UPDATE", "VIRTUAL_MACHINE_SNAPSHOT_DELETE", "VIRTUAL_MACHINE_RESTORE", "VIRTUAL_MACHINE_DISKS_RESTORE"}[i]
}
func ParseVirtualMachinesGetResponse_allowedOperations(v string) (any, error) {
    result := VIRTUAL_MACHINE_POWER_ON_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
    switch v {
        case "VIRTUAL_MACHINE_POWER_ON":
            result = VIRTUAL_MACHINE_POWER_ON_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
        case "VIRTUAL_MACHINE_POWER_OFF":
            result = VIRTUAL_MACHINE_POWER_OFF_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
        case "VIRTUAL_MACHINE_RESET":
            result = VIRTUAL_MACHINE_RESET_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
        case "VIRTUAL_MACHINE_SHUTDOWN_GUEST_OS":
            result = VIRTUAL_MACHINE_SHUTDOWN_GUEST_OS_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
        case "VIRTUAL_MACHINE_RESTART_GUEST_OS":
            result = VIRTUAL_MACHINE_RESTART_GUEST_OS_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
        case "VIRTUAL_MACHINE_DELETE":
            result = VIRTUAL_MACHINE_DELETE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
        case "VIRTUAL_MACHINE_BACKUP_CREATE":
            result = VIRTUAL_MACHINE_BACKUP_CREATE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
        case "VIRTUAL_MACHINE_BACKUP_UPDATE":
            result = VIRTUAL_MACHINE_BACKUP_UPDATE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
        case "VIRTUAL_MACHINE_BACKUP_DELETE":
            result = VIRTUAL_MACHINE_BACKUP_DELETE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
        case "VIRTUAL_MACHINE_SNAPSHOT_CREATE":
            result = VIRTUAL_MACHINE_SNAPSHOT_CREATE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
        case "VIRTUAL_MACHINE_SNAPSHOT_UPDATE":
            result = VIRTUAL_MACHINE_SNAPSHOT_UPDATE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
        case "VIRTUAL_MACHINE_SNAPSHOT_DELETE":
            result = VIRTUAL_MACHINE_SNAPSHOT_DELETE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
        case "VIRTUAL_MACHINE_RESTORE":
            result = VIRTUAL_MACHINE_RESTORE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
        case "VIRTUAL_MACHINE_DISKS_RESTORE":
            result = VIRTUAL_MACHINE_DISKS_RESTORE_VIRTUALMACHINESGETRESPONSE_ALLOWEDOPERATIONS
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeVirtualMachinesGetResponse_allowedOperations(values []VirtualMachinesGetResponse_allowedOperations) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i VirtualMachinesGetResponse_allowedOperations) isMultiValue() bool {
    return false
}
